<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2023.2.3">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="False" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[960, 600]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="AO_human_v_robot_pilot" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="scene_camera.json" valType="file" updates="None" name="plCompanionCameraCalibration"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="stimLoader">
      <RoutineSettingsComponent name="stimLoader" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="stimLoader" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeLoader" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="condition_list = [];&amp;#10;action_list = [];&amp;#10;stim_dir_list=[];&amp;#10;&amp;#10;N_rep = 4&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="condition_list = [];&amp;#10;action_list = [];&amp;#10;stim_dir_list = [];&amp;#10;N_rep = 4;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="action_list.push(actions);&amp;#10;condition_list.push(conditions);&amp;#10;stim_dir_list.push(stimDir);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="action_list.append(actions);&amp;#10;condition_list.append(conditions);&amp;#10;stim_dir_list.append(stimDir);&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeLoader" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="stimShuffler">
      <RoutineSettingsComponent name="stimShuffler" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="stimShuffler" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeShuffler" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#from numpy.random import choice&amp;#10;#import csv&amp;#10;#import datetime&amp;#10;&amp;#10;counterBlock = 0&amp;#10;&amp;#10;cbBlockList = [] # List of blocks in counterbalanced manner&amp;#10;dictBlockList = [] # List of block dictionaries, each contains  &amp;#10;condBlockList = [] # LIST OF CONDITION FOR EACH BLOCK&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="counterBlock = 0;&amp;#10;cbBlockList = [];&amp;#10;dictBlockList = [];&amp;#10;condBlockList = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;function find_unique_func(arr) {&amp;#10;    var unique_elements;&amp;#10;    unique_elements = [];&amp;#10;    for (var item, _pj_c = 0, _pj_a = arr, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        item = _pj_a[_pj_c];&amp;#10;        if ((! _pj.in_es6(item, unique_elements))) {&amp;#10;            unique_elements.push(item);&amp;#10;        }&amp;#10;    }&amp;#10;    return unique_elements;&amp;#10;}&amp;#10;find_unique = find_unique_func;&amp;#10;unique_conditions = find_unique(condition_list);&amp;#10;N_condition = unique_conditions.length;&amp;#10;N_stim = Number.parseInt((action_list.length / (N_rep * N_condition)));&amp;#10;N_block = (N_rep * N_condition);&amp;#10;N_blockStim = Number.parseInt((action_list.length / N_block));&amp;#10;block_list = [];&amp;#10;actionCond = [];&amp;#10;blockCond = [];&amp;#10;for (var cond, _pj_c = 0, _pj_a = unique_conditions, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    cond = _pj_a[_pj_c];&amp;#10;    actionCond = [];&amp;#10;    for (var idx, _pj_f = 0, _pj_d = util.range(condition_list.length), _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;        idx = _pj_d[_pj_f];&amp;#10;        if ((condition_list[idx] === cond)) {&amp;#10;            actionCond.push(action_list[idx]);&amp;#10;        }&amp;#10;    }&amp;#10;    checkConditions = false;&amp;#10;    while ((! checkConditions)) {&amp;#10;        util.shuffle(actionCond);&amp;#10;        for (var i, _pj_f = 0, _pj_d = util.range((actionCond.length - 2)), _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;            i = _pj_d[_pj_f];&amp;#10;            if (((actionCond[i] === actionCond[(i + 1)]) &amp;&amp; (actionCond[(i + 1)] === actionCond[(i + 2)]))) {&amp;#10;                break;&amp;#10;            } else {&amp;#10;                checkConditions = true;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    blockCond = function () {&amp;#10;    var _pj_d = [], _pj_e = util.range(0, actionCond.length, N_blockStim);&amp;#10;    for (var _pj_f = 0, _pj_g = _pj_e.length; (_pj_f &lt; _pj_g); _pj_f += 1) {&amp;#10;        var i = _pj_e[_pj_f];&amp;#10;        _pj_d.push(actionCond.slice(i, (i + N_blockStim)));&amp;#10;    }&amp;#10;    return _pj_d;&amp;#10;}&amp;#10;.call(this);&amp;#10;    block_list.push(blockCond);&amp;#10;}&amp;#10;reshaped_list = [];&amp;#10;for (var outer_list, _pj_c = 0, _pj_a = block_list, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    outer_list = _pj_a[_pj_c];&amp;#10;    for (var inner_list, _pj_f = 0, _pj_d = outer_list, _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;        inner_list = _pj_d[_pj_f];&amp;#10;        reshaped_list.push(inner_list);&amp;#10;    }&amp;#10;}&amp;#10;block_list = reshaped_list;&amp;#10;condIdxList = [];&amp;#10;for (var num, _pj_c = 0, _pj_a = util.range(N_condition), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    num = _pj_a[_pj_c];&amp;#10;    for (var _, _pj_f = 0, _pj_d = util.range(N_rep), _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;        _ = _pj_d[_pj_f];&amp;#10;        condIdxList.push(num);&amp;#10;    }&amp;#10;}&amp;#10;enumerated_list = [];&amp;#10;idx = 0;&amp;#10;for (var val, _pj_c = 0, _pj_a = condIdxList, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    val = _pj_a[_pj_c];&amp;#10;    enumerated_list.push([idx, val]);&amp;#10;    idx = (idx + 1);&amp;#10;}&amp;#10;checkConditions = false;&amp;#10;shuffled_indexes = [];&amp;#10;shuffled_cond = [];&amp;#10;while ((! checkConditions)) {&amp;#10;    util.shuffle(enumerated_list);&amp;#10;    for (var row, _pj_c = 0, _pj_a = enumerated_list, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        row = _pj_a[_pj_c];&amp;#10;        shuffled_indexes.push(row[0]);&amp;#10;        shuffled_cond.push(row[1]);&amp;#10;    }&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range((shuffled_cond.length - 2)), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        if (((shuffled_cond[i] === shuffled_cond[(i + 1)]) &amp;&amp; (shuffled_cond[(i + 1)] === shuffled_cond[(i + 2)]))) {&amp;#10;            break;&amp;#10;        } else {&amp;#10;            checkConditions = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;for (var i, _pj_c = 0, _pj_a = shuffled_indexes, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    cbBlockList.push(block_list[i]);&amp;#10;}&amp;#10;ctShuffledCounter = 0;&amp;#10;dictBlock = {};&amp;#10;condList = [];&amp;#10;actionList = [];&amp;#10;dirList = [];&amp;#10;actionStr = &quot;&quot;;&amp;#10;for (var block, _pj_c = 0, _pj_a = util.range(N_block), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    block = _pj_a[_pj_c];&amp;#10;    dictBlock = {};&amp;#10;    condList = [];&amp;#10;    actionList = [];&amp;#10;    dirList = [];&amp;#10;    for (var idx, _pj_f = 0, _pj_d = util.range(N_stim), _pj_e = _pj_d.length; (_pj_f &lt; _pj_e); _pj_f += 1) {&amp;#10;        idx = _pj_d[_pj_f];&amp;#10;        actionStr = cbBlockList[block][idx];&amp;#10;        condList.push(actionStr.slice(0, (- 2)));&amp;#10;        actionList.push(actionStr);&amp;#10;        dirList.push(((&quot;./stimuli/&quot; + actionStr) + &quot;.mp4&quot;));&amp;#10;    }&amp;#10;    dictBlock[&quot;conditions&quot;] = condList;&amp;#10;    dictBlock[&quot;actions&quot;] = actionList;&amp;#10;    dictBlock[&quot;stimDir&quot;] = dirList;&amp;#10;    dictBlockList.push(dictBlock);&amp;#10;}&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(N_block), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    condBlockList.push(find_unique(dictBlockList[i][&quot;conditions&quot;]));&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="def find_unique_func(arr):&amp;#10;    unique_elements = []&amp;#10;    for item in arr:&amp;#10;        if item not in unique_elements:&amp;#10;            unique_elements.append(item)&amp;#10;    return unique_elements&amp;#10;find_unique = find_unique_func&amp;#10;&amp;#10;unique_conditions = find_unique(condition_list) # list of unique conditions (n=4)&amp;#10;&amp;#10;N_condition = len(unique_conditions) # number of conditions: human and robot, left and right arm&amp;#10;N_stim = int(len(action_list)/(N_rep*N_condition)) # number of action stimuli: 8&amp;#10;N_block = N_rep * N_condition # number of blocks = 4x4 = 16&amp;#10;N_blockStim = int(len(action_list) / N_block) # number of stimuli per block: 8&amp;#10;&amp;#10;# ASSIGN ITEMS INTO BLOCKS AND SHUFFLE THEM WITHIN EACH BLOCK (Errante et al 2020)&amp;#10;block_list = []&amp;#10;actionCond = []&amp;#10;blockCond = []&amp;#10;for cond in unique_conditions:&amp;#10;    actionCond = []&amp;#10;    for idx in range(len(condition_list)):&amp;#10;        if condition_list[idx] == cond:&amp;#10;            actionCond.append(action_list[idx])&amp;#10;    checkConditions = False&amp;#10;    while not checkConditions:&amp;#10;        shuffle(actionCond)&amp;#10;        for i in range(len(actionCond) - 2):&amp;#10;            if actionCond[i] == actionCond[i + 1] == actionCond[i + 2]:&amp;#10;                break&amp;#10;            else:&amp;#10;                checkConditions = True&amp;#10;&amp;#10;    blockCond = [actionCond[i:i+N_blockStim] for i in range(0, len(actionCond), N_blockStim)]&amp;#10;    block_list.append(blockCond)&amp;#10;&amp;#10;reshaped_list = []&amp;#10;# Iterate through the original list and append inner lists to the reshaped list&amp;#10;for outer_list in block_list:&amp;#10;    for inner_list in outer_list:&amp;#10;        reshaped_list.append(inner_list)&amp;#10;block_list = reshaped_list # shape of (16,8) (16 blocks, 8 items per block)&amp;#10;#print(&quot;#######&quot;, block_list[0])&amp;#10;#print(&quot;row: &quot;, len(block_list), &quot;, column: &quot;, len(block_list[0]))&amp;#10;#print(&quot;####&quot;, block_list)&amp;#10;&amp;#10;&amp;#10;# SHUFFLE BLOCKS' ORDER IN COUNTERBALANCED MANNER&amp;#10;condIdxList = [] # create a list looking like [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]&amp;#10;for num in range(N_condition):&amp;#10;    for _ in range(N_rep):&amp;#10;        condIdxList.append(num)&amp;#10;&amp;#10;#indexed_list = list(enumerate(condIdxList))&amp;#10;enumerated_list = []&amp;#10;idx = 0&amp;#10;for val in condIdxList:&amp;#10;    enumerated_list.append((idx, val))&amp;#10;    idx = idx + 1&amp;#10;&amp;#10;checkConditions = False&amp;#10;shuffled_indexes = []&amp;#10;shuffled_cond = []&amp;#10;while not checkConditions:&amp;#10;    shuffle(enumerated_list)&amp;#10;#    shuffled_indexes, shuffled_cond = zip(*enumerated_list)&amp;#10;    # unzip enumerated_list and extract columns&amp;#10;    for row in enumerated_list:&amp;#10;        shuffled_indexes.append(row[0])&amp;#10;        shuffled_cond.append(row[1])&amp;#10;        &amp;#10;    for i in range(len(shuffled_cond)-2):&amp;#10;        if shuffled_cond[i] == shuffled_cond[i + 1] == shuffled_cond[i + 2]:&amp;#10;            break&amp;#10;        else:&amp;#10;            checkConditions = True&amp;#10;&amp;#10;for i in shuffled_indexes:&amp;#10;    cbBlockList.append(block_list[i])&amp;#10;#print('cbBlockList:', cbBlockList)&amp;#10;#print(cbBlockList[0])&amp;#10;#print(cbBlockList[0][1])&amp;#10;&amp;#10;&amp;#10;# LIST OF BLOCK DICTIONARY&amp;#10;# Each dictionary is a block with N_stim stimuli&amp;#10;ctShuffledCounter = 0&amp;#10;dictBlock = {}&amp;#10;condList = []&amp;#10;actionList = []&amp;#10;dirList = []&amp;#10;actionStr = &quot;&quot;&amp;#10;for block in range(N_block):&amp;#10;    dictBlock = {}&amp;#10;    condList = []&amp;#10;    actionList = []&amp;#10;    dirList = []&amp;#10;    for idx in range(N_stim):&amp;#10;        actionStr = cbBlockList[block][idx]&amp;#10;        condList.append(actionStr[:-2])&amp;#10;        actionList.append(actionStr)&amp;#10;        dirList.append(&quot;./stimuli/&quot; + actionStr + &quot;.mp4&quot;)&amp;#10;    dictBlock['conditions'] = condList&amp;#10;    dictBlock['actions'] = actionList&amp;#10;    dictBlock['stimDir'] = dirList&amp;#10;    dictBlockList.append(dictBlock)&amp;#10;    &amp;#10;#print('dictBlockList:', dictBlockList)&amp;#10;#print(np.shape(dictBlockList))&amp;#10;&amp;#10;## EXPORT DICTIONARY dictBlockList&amp;#10;#current_datetime = datetime.datetime.now()&amp;#10;#filepath = f&quot;./output/dictBlockList_{current_datetime.strftime('%Y-%m-%d_%H-%M-%S')}.csv&quot;&amp;#10;#with open(filepath, 'w', newline='') as csvfile:&amp;#10;#    writer = csv.DictWriter(csvfile, fieldnames = list(dictBlockList[0].keys()))&amp;#10;#    writer.writeheader()&amp;#10;#    for entry in dictBlockList:&amp;#10;#        rows = zip(entry['conditions'],entry['actions'], entry['stimDir'])&amp;#10;#        for row in rows:&amp;#10;#            writer.writerow({'conditions':row[0], 'actions':row[1], 'stimDir':row[2]})&amp;#10;        &amp;#10;# LIST OF CONDITION FOR EACH BLOCK&amp;#10;for i in range(N_block):&amp;#10;    condBlockList.append(find_unique(dictBlockList[i]['conditions']))&amp;#10;#print(&quot;Order of condition blocks: &quot;, condBlockList)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeShuffler" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="welcomeScreen">
      <RoutineSettingsComponent name="welcomeScreen" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="welcomeScreen" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="textWelcome" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textWelcome" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Welcome&amp;#10;&amp;#10;Press Space to start the experiment" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="keyWelcome" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keyWelcome" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="restPeriod">
      <RoutineSettingsComponent name="restPeriod" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="restPeriod" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="crossRest" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="crossRest" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="cross" valType="str" updates="None" name="shape"/>
        <Param val="(0.1, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="15" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <CodeComponent name="codeRest" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="counterStim = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="counterStim = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="console.log(`======= counterBlock ${counterBlock} - condition: ${condBlockList[counterBlock]} =======`);&amp;#10;counterStim = 0;&amp;#10;countDownN = 3;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="print(f&quot;======= counterBlock {counterBlock} - condition: {condBlockList[counterBlock]} =======&quot;)&amp;#10;&amp;#10;&amp;#10;counterStim = 0&amp;#10;countDownN = 3" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeRest" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="skipRest" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="skipRest" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="15" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="beginBlock">
      <RoutineSettingsComponent name="beginBlock" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="beginBlock" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="beginInstruction" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="beginInstruction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Observe the actions presented in the following videos." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="textCountDown" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textCountDown" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$countDownN" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="codeCountDown" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="countDownN = (countDownN - 1);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="countDownN = countDownN -1" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeCountDown" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="stimVid">
      <RoutineSettingsComponent name="stimVid" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="stimVid" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <MovieComponent name="stimAction" plugin="None">
        <Param val="True" valType="bool" updates="None" name="No audio"/>
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="ffpyplayer" valType="str" updates="None" name="backend"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="5.0" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="False" valType="bool" updates="None" name="loop"/>
        <Param val="$dictBlockList[counterBlock]['stimDir'][counterStim]" valType="file" updates="set every repeat" name="movie"/>
        <Param val="stimAction" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.75, 0.42)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="stopWithRoutine"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1" valType="num" updates="None" name="volume"/>
      </MovieComponent>
      <CodeComponent name="codeStim" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="console.log(`counterStim ${counterStim} - ${dictBlockList[counterBlock][&quot;stimDir&quot;][counterStim]}`);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="print(f&quot;counterStim {counterStim} - {dictBlockList[counterBlock]['stimDir'][counterStim]}&quot;)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeStim" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="endStim">
      <RoutineSettingsComponent name="endStim" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="endStim" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeEndStim" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="counterStim += 1;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="counterStim += 1" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeEndStim" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="endFuncRun">
      <RoutineSettingsComponent name="endFuncRun" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="endFuncRun" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="codeEndRun" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="counterBlock += 1;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="counterBlock += 1" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="codeEndRun" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="endTrial">
      <RoutineSettingsComponent name="endTrial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="endTrial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="textEnd" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textEnd" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="20" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Thank you for your participation!&amp;#10;&amp;#10;Press Space to exit the experiment" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="keyEnd" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="keyEnd" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="20" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="loopLoader">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'actors': 'human', 'sides': 'left', 'conditions': 'human_left', 'actions': 'human_left_0', 'actionNumbering': 'mov_0', 'mappedActions': 'air punching', 'stimDir': './stimuli/human/human_left_mov_0.mp4'}, {'actors': 'human', 'sides': 'left', 'conditions': 'human_left', 'actions': 'human_left_1', 'actionNumbering': 'mov_1', 'mappedActions': 'backward-forward arm swing', 'stimDir': './stimuli/human/human_left_mov_1.mp4'}, {'actors': 'human', 'sides': 'left', 'conditions': 'human_left', 'actions': 'human_left_2', 'actionNumbering': 'mov_2', 'mappedActions': 'lateral arm swing', 'stimDir': './stimuli/human/human_left_mov_2.mp4'}, {'actors': 'human', 'sides': 'left', 'conditions': 'human_left', 'actions': 'human_left_3', 'actionNumbering': 'mov_3', 'mappedActions': 'reach forward', 'stimDir': './stimuli/human/human_left_mov_3.mp4'}, {'actors': 'human', 'sides': 'left', 'conditions': 'human_left', 'actions': 'human_left_4', 'actionNumbering': 'mov_4', 'mappedActions': 'read to the side', 'stimDir': './stimuli/human/human_left_mov_4.mp4'}, {'actors': 'human', 'sides': 'left', 'conditions': 'human_left', 'actions': 'human_left_5', 'actionNumbering': 'mov_5', 'mappedActions': 'touch face', 'stimDir': './stimuli/human/human_left_mov_5.mp4'}, {'actors': 'human', 'sides': 'left', 'conditions': 'human_left', 'actions': 'human_left_6', 'actionNumbering': 'mov_6', 'mappedActions': 'touch head', 'stimDir': './stimuli/human/human_left_mov_6.mp4'}, {'actors': 'human', 'sides': 'left', 'conditions': 'human_left', 'actions': 'human_left_7', 'actionNumbering': 'mov_7', 'mappedActions': 'waving', 'stimDir': './stimuli/human/human_left_mov_7.mp4'}, {'actors': 'human', 'sides': 'right', 'conditions': 'human_right', 'actions': 'human_right_0', 'actionNumbering': 'mov_0', 'mappedActions': 'air punching', 'stimDir': './stimuli/human/human_right_mov_0.mp4'}, {'actors': 'human', 'sides': 'right', 'conditions': 'human_right', 'actions': 'human_right_1', 'actionNumbering': 'mov_1', 'mappedActions': 'backward-forward arm swing', 'stimDir': './stimuli/human/human_right_mov_1.mp4'}, {'actors': 'human', 'sides': 'right', 'conditions': 'human_right', 'actions': 'human_right_2', 'actionNumbering': 'mov_2', 'mappedActions': 'lateral arm swing', 'stimDir': './stimuli/human/human_right_mov_2.mp4'}, {'actors': 'human', 'sides': 'right', 'conditions': 'human_right', 'actions': 'human_right_3', 'actionNumbering': 'mov_3', 'mappedActions': 'reach forward', 'stimDir': './stimuli/human/human_right_mov_3.mp4'}, {'actors': 'human', 'sides': 'right', 'conditions': 'human_right', 'actions': 'human_right_4', 'actionNumbering': 'mov_4', 'mappedActions': 'read to the side', 'stimDir': './stimuli/human/human_right_mov_4.mp4'}, {'actors': 'human', 'sides': 'right', 'conditions': 'human_right', 'actions': 'human_right_5', 'actionNumbering': 'mov_5', 'mappedActions': 'touch face', 'stimDir': './stimuli/human/human_right_mov_5.mp4'}, {'actors': 'human', 'sides': 'right', 'conditions': 'human_right', 'actions': 'human_right_6', 'actionNumbering': 'mov_6', 'mappedActions': 'touch head', 'stimDir': './stimuli/human/human_right_mov_6.mp4'}, {'actors': 'human', 'sides': 'right', 'conditions': 'human_right', 'actions': 'human_right_7', 'actionNumbering': 'mov_7', 'mappedActions': 'waving', 'stimDir': './stimuli/human/human_right_mov_7.mp4'}, {'actors': 'robot', 'sides': 'left', 'conditions': 'robot_left', 'actions': 'robot_left_0', 'actionNumbering': 'mov_0', 'mappedActions': 'air punching', 'stimDir': './stimuli/robot/robot_left_mov_0.mp4'}, {'actors': 'robot', 'sides': 'left', 'conditions': 'robot_left', 'actions': 'robot_left_1', 'actionNumbering': 'mov_1', 'mappedActions': 'backward-forward arm swing', 'stimDir': './stimuli/robot/robot_left_mov_1.mp4'}, {'actors': 'robot', 'sides': 'left', 'conditions': 'robot_left', 'actions': 'robot_left_2', 'actionNumbering': 'mov_2', 'mappedActions': 'lateral arm swing', 'stimDir': './stimuli/robot/robot_left_mov_2.mp4'}, {'actors': 'robot', 'sides': 'left', 'conditions': 'robot_left', 'actions': 'robot_left_3', 'actionNumbering': 'mov_3', 'mappedActions': 'reach forward', 'stimDir': './stimuli/robot/robot_left_mov_3.mp4'}, {'actors': 'robot', 'sides': 'left', 'conditions': 'robot_left', 'actions': 'robot_left_4', 'actionNumbering': 'mov_4', 'mappedActions': 'read to the side', 'stimDir': './stimuli/robot/robot_left_mov_4.mp4'}, {'actors': 'robot', 'sides': 'left', 'conditions': 'robot_left', 'actions': 'robot_left_5', 'actionNumbering': 'mov_5', 'mappedActions': 'touch face', 'stimDir': './stimuli/robot/robot_left_mov_5.mp4'}, {'actors': 'robot', 'sides': 'left', 'conditions': 'robot_left', 'actions': 'robot_left_6', 'actionNumbering': 'mov_6', 'mappedActions': 'touch head', 'stimDir': './stimuli/robot/robot_left_mov_6.mp4'}, {'actors': 'robot', 'sides': 'left', 'conditions': 'robot_left', 'actions': 'robot_left_7', 'actionNumbering': 'mov_7', 'mappedActions': 'waving', 'stimDir': './stimuli/robot/robot_left_mov_7.mp4'}, {'actors': 'robot', 'sides': 'right', 'conditions': 'robot_right', 'actions': 'robot_right_0', 'actionNumbering': 'mov_0', 'mappedActions': 'air punching', 'stimDir': './stimuli/robot/robot_right_mov_0.mp4'}, {'actors': 'robot', 'sides': 'right', 'conditions': 'robot_right', 'actions': 'robot_right_1', 'actionNumbering': 'mov_1', 'mappedActions': 'backward-forward arm swing', 'stimDir': './stimuli/robot/robot_right_mov_1.mp4'}, {'actors': 'robot', 'sides': 'right', 'conditions': 'robot_right', 'actions': 'robot_right_2', 'actionNumbering': 'mov_2', 'mappedActions': 'lateral arm swing', 'stimDir': './stimuli/robot/robot_right_mov_2.mp4'}, {'actors': 'robot', 'sides': 'right', 'conditions': 'robot_right', 'actions': 'robot_right_3', 'actionNumbering': 'mov_3', 'mappedActions': 'reach forward', 'stimDir': './stimuli/robot/robot_right_mov_3.mp4'}, {'actors': 'robot', 'sides': 'right', 'conditions': 'robot_right', 'actions': 'robot_right_4', 'actionNumbering': 'mov_4', 'mappedActions': 'read to the side', 'stimDir': './stimuli/robot/robot_right_mov_4.mp4'}, {'actors': 'robot', 'sides': 'right', 'conditions': 'robot_right', 'actions': 'robot_right_5', 'actionNumbering': 'mov_5', 'mappedActions': 'touch face', 'stimDir': './stimuli/robot/robot_right_mov_5.mp4'}, {'actors': 'robot', 'sides': 'right', 'conditions': 'robot_right', 'actions': 'robot_right_6', 'actionNumbering': 'mov_6', 'mappedActions': 'touch head', 'stimDir': './stimuli/robot/robot_right_mov_6.mp4'}, {'actors': 'robot', 'sides': 'right', 'conditions': 'robot_right', 'actions': 'robot_right_7', 'actionNumbering': 'mov_7', 'mappedActions': 'waving', 'stimDir': './stimuli/robot/robot_right_mov_7.mp4'}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="stimuli_table.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="N_rep" valType="num"/>
      <Param name="name" updates="None" val="loopLoader" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="stimLoader"/>
    <LoopTerminator name="loopLoader"/>
    <Routine name="stimShuffler"/>
    <Routine name="welcomeScreen"/>
    <LoopInitiator loopType="TrialHandler" name="loopFuncRun">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="N_block" valType="num"/>
      <Param name="name" updates="None" val="loopFuncRun" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="restPeriod"/>
    <LoopInitiator loopType="TrialHandler" name="loopCountDown">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="4" valType="num"/>
      <Param name="name" updates="None" val="loopCountDown" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="beginBlock"/>
    <LoopTerminator name="loopCountDown"/>
    <LoopInitiator loopType="TrialHandler" name="loopBlock">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="N_stim" valType="num"/>
      <Param name="name" updates="None" val="loopBlock" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="stimVid"/>
    <Routine name="endStim"/>
    <LoopTerminator name="loopBlock"/>
    <Routine name="endFuncRun"/>
    <LoopTerminator name="loopFuncRun"/>
    <Routine name="endTrial"/>
  </Flow>
</PsychoPy2experiment>
